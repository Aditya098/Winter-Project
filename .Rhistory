# Create Twitter Connection
setup_twitter_oauth(api_key, api_secret, token, token_secret)
username <- "oneplus"                 #username to find followers
user <- getUser(username)
followers <- user$getFollowers(1000)  #limiting followers to 1000
followers <- twListToDF(followers)    #converting to dataframe
followers$location[followers$location==""] <- NA    #assigning NA (not applicable)to
#followers whose location is not specified
#length(followers)
followers <- followers[sample(1:nrow(followers), size =100),]  #size must be less than length of followers
loc1<- !is.na(followers$location)
loc<-followers$location[loc1]
library('ggmap')
coord <- geocode(loc)          # geocoding the followers locations
library(maps)
library(ggplot2)
map.dat <- map_data("world")
fig <- ggplot() +      #plotting  the locations on world map
geom_polygon(aes(long,lat, group=group), fill="grey80", data=map.dat) +
geom_point(aes(x = lon, y = lat),alpha=I(0.2),size=I(0.5), data = coord) +
theme_minimal() +
guides(fill = guide_legend(override.aes = list(alpha = 1))) +
ggtitle("Followers") +
theme(text = element_text(size=15))
fig
library(NbClust)                      #using NbClust library to find optimal
#number of clusters
nb <- NbClust(coord, distance = "euclidean", min.nc = 2,
max.nc = 10, method = "kmeans", index ="all")
nClust<-length(unique(nb$Best.partition))
clustRange <- 1:nClust
kmeans.df <- data.frame(lat = coord$lat,
lon = coord$lon)
kmeans.df <- na.omit(kmeans.df)     #omiting terms with NA
#for(i in clustRange){
# fit <- kmeans(kmeans.df, centers = i, iter.max = 100)
#  }
#performing kmeans on location data frame
#with centers as nClust(number of clusters)
fit <- kmeans(kmeans.df, centers = nClust, nstart = 20)
kmeans.df$cluster = fit$cluster #adding cluster column to data frame
library(RColorBrewer)               # using RColorBrewer to assign  colours
cols <- brewer.pal(nClust, "Set3")  #to points with same cluster number
for(i in 1:nClust){
kmeans.df$color[kmeans.df$cluster == i] <- cols[i]
}
kmeans.df$Cluster <- as.factor(kmeans.df$cluster)
g <- ggplot() +                       #plotting the geopoints with clusters
geom_polygon(aes(long,lat, group=group), fill="grey85", data=map.dat) +
geom_jitter(aes(x = lon, y = lat, fill=Cluster,
colour=Cluster), alpha=1, size=0.8,  data = kmeans.df) +
guides(fill = guide_legend( override.aes = list(alpha = 1))) +
theme_minimal() +
theme(text = element_text(size=15),
legend.position="top")
g
library("MASS")
stat_density_2d <- function(mapping = NULL, data = NULL, geom = "density_2d",
position = "identity", contour = TRUE,
n = 100, h = NULL, na.rm = FALSE,bins=0,
show.legend = NA, inherit.aes = TRUE, ...) {
layer(
data = data,
mapping = mapping,
stat = StatDensity2d,
geom = geom,
position = position,
show.legend = show.legend,
inherit.aes = inherit.aes,
params = list(
na.rm = na.rm,
contour = contour,
n = n,
bins=bins,
...
)
)
}
stat_density2d <- stat_density_2d
StatDensity2d <-
ggproto("StatDensity2d", Stat,
default_aes = aes(colour = "#3366FF", size = 0.5),
required_aes = c("x", "y"),
compute_group = function(data, scales, na.rm = FALSE, h = NULL,
contour = TRUE, n = 100,bins=0) {
if (is.null(h)) {
h <- c(MASS::bandwidth.nrd(data$x), MASS::bandwidth.nrd(data$y))
}
dens <- MASS::kde2d(
data$x, data$y, h = h, n = n,
lims = c(scales$x$dimension(), scales$y$dimension())
)
df <- data.frame(expand.grid(x = dens$x, y = dens$y), z = as.vector(dens$z))
df$group <- data$group[1]
if (contour) {
if (bins>0){
StatContour$compute_panel(df, scales,bins)
} else {
StatContour$compute_panel(df, scales)
}
} else {
names(df) <- c("x", "y", "density", "group")
df$level <- 1
df$piece <- 1
df
}
}
)
g <- g +
stat_density2d(
aes(x = lon, y = lat,fill=as.factor(cluster), colour=as.factor(cluster)),
bins = 10, alpha=.2,
size=0, data = kmeans.df, geom = "polygon")
g
library(twitteR)
api_key <- "P7qWpvpj1vhYe7RQbvk7QvMQP"  #twiiter api_key,secret
api_secret <- "eNd316moWK5A85I5BEw9zyLp8fmtjLbMc8jSS1vxFPGNqKniAS"
token <- "809633084370886657-KZm26HPDYsMv0qPdoBCoFdkPMdrxlyz"
token_secret <- "PkP0pQjfo0U6ijSmTSKNw0wG5Czs1P0W0muHcCqbEcekp"
# Create Twitter Connection
setup_twitter_oauth(api_key, api_secret, token, token_secret)
username <- "oneplus"                 #username to find followers
user <- getUser(username)
followers <- user$getFollowers(200)  #limiting followers to 1000
followers <- twListToDF(followers)    #converting to dataframe
followers$location[followers$location==""] <- NA    #assigning NA (not applicable)to
#followers whose location is not specified
#length(followers)
followers <- followers[sample(1:nrow(followers), size =100),]  #size must be less than length of followers
loc1<- !is.na(followers$location)
loc<-followers$location[loc1]
library('ggmap')
coord <- geocode(loc)          # geocoding the followers locations
library(maps)
library(ggplot2)
map.dat <- map_data("world")
fig <- ggplot() +      #plotting  the locations on world map
geom_polygon(aes(long,lat, group=group), fill="grey80", data=map.dat) +
geom_point(aes(x = lon, y = lat),alpha=I(0.2),size=I(0.5), data = coord) +
theme_minimal() +
guides(fill = guide_legend(override.aes = list(alpha = 1))) +
ggtitle("Followers") +
theme(text = element_text(size=15))
fig
library(NbClust)                      #using NbClust library to find optimal
#number of clusters
nb <- NbClust(coord, distance = "euclidean", min.nc = 2,
max.nc = 10, method = "kmeans", index ="all")
nClust<-length(unique(nb$Best.partition))
clustRange <- 1:nClust
kmeans.df <- data.frame(lat = coord$lat,
lon = coord$lon)
kmeans.df <- na.omit(kmeans.df)     #omiting terms with NA
#for(i in clustRange){
# fit <- kmeans(kmeans.df, centers = i, iter.max = 100)
#  }
#performing kmeans on location data frame
#with centers as nClust(number of clusters)
fit <- kmeans(kmeans.df, centers = nClust, nstart = 20)
kmeans.df$cluster = fit$cluster #adding cluster column to data frame
library(RColorBrewer)               # using RColorBrewer to assign  colours
cols <- brewer.pal(nClust, "Set3")  #to points with same cluster number
for(i in 1:nClust){
kmeans.df$color[kmeans.df$cluster == i] <- cols[i]
}
kmeans.df$Cluster <- as.factor(kmeans.df$cluster)
g <- ggplot() +                       #plotting the geopoints with clusters
geom_polygon(aes(long,lat, group=group), fill="grey85", data=map.dat) +
geom_jitter(aes(x = lon, y = lat, fill=Cluster,
colour=Cluster), alpha=1, size=0.8,  data = kmeans.df) +
guides(fill = guide_legend( override.aes = list(alpha = 1))) +
theme_minimal() +
theme(text = element_text(size=15),
legend.position="top")
g
library("MASS")
stat_density_2d <- function(mapping = NULL, data = NULL, geom = "density_2d",
position = "identity", contour = TRUE,
n = 100, h = NULL, na.rm = FALSE,bins=0,
show.legend = NA, inherit.aes = TRUE, ...) {
layer(
data = data,
mapping = mapping,
stat = StatDensity2d,
geom = geom,
position = position,
show.legend = show.legend,
inherit.aes = inherit.aes,
params = list(
na.rm = na.rm,
contour = contour,
n = n,
bins=bins,
...
)
)
}
stat_density2d <- stat_density_2d
StatDensity2d <-
ggproto("StatDensity2d", Stat,
default_aes = aes(colour = "#3366FF", size = 0.5),
required_aes = c("x", "y"),
compute_group = function(data, scales, na.rm = FALSE, h = NULL,
contour = TRUE, n = 100,bins=0) {
if (is.null(h)) {
h <- c(MASS::bandwidth.nrd(data$x), MASS::bandwidth.nrd(data$y))
}
dens <- MASS::kde2d(
data$x, data$y, h = h, n = n,
lims = c(scales$x$dimension(), scales$y$dimension())
)
df <- data.frame(expand.grid(x = dens$x, y = dens$y), z = as.vector(dens$z))
df$group <- data$group[1]
if (contour) {
if (bins>0){
StatContour$compute_panel(df, scales,bins)
} else {
StatContour$compute_panel(df, scales)
}
} else {
names(df) <- c("x", "y", "density", "group")
df$level <- 1
df$piece <- 1
df
}
}
)
g <- g +
stat_density2d(
aes(x = lon, y = lat,fill=as.factor(cluster), colour=as.factor(cluster)),
bins = 10, alpha=.2,
size=0, data = kmeans.df, geom = "polygon")
g
library(twitteR)
api_key <- "P7qWpvpj1vhYe7RQbvk7QvMQP"  #twiiter api_key,secret
api_secret <- "eNd316moWK5A85I5BEw9zyLp8fmtjLbMc8jSS1vxFPGNqKniAS"
token <- "809633084370886657-KZm26HPDYsMv0qPdoBCoFdkPMdrxlyz"
token_secret <- "PkP0pQjfo0U6ijSmTSKNw0wG5Czs1P0W0muHcCqbEcekp"
# Create Twitter Connection
setup_twitter_oauth(api_key, api_secret, token, token_secret)
username <- "oneplus"                 #username to find followers
user <- getUser(username)
followers <- user$getFollowers(200)  #limiting followers to 1000
followers <- twListToDF(followers)    #converting to dataframe
followers$location[followers$location==""] <- NA    #assigning NA (not applicable)to
#followers whose location is not specified
#length(followers)
followers <- followers[sample(1:nrow(followers), size =100),]  #size must be less than length of followers
loc1<- !is.na(followers$location)
loc<-followers$location[loc1]
library('ggmap')
coord <- geocode(loc)          # geocoding the followers locations
library(maps)
library(ggplot2)
map.dat <- map_data("world")
fig <- ggplot() +      #plotting  the locations on world map
geom_polygon(aes(long,lat, group=group), fill="grey80", data=map.dat) +
geom_point(aes(x = lon, y = lat),alpha=I(0.2),size=I(0.5), data = coord) +
theme_minimal() +
guides(fill = guide_legend(override.aes = list(alpha = 1))) +
ggtitle("Followers") +
theme(text = element_text(size=15))
fig
library(NbClust)                      #using NbClust library to find optimal
#number of clusters
nb <- NbClust(coord, distance = "euclidean", min.nc = 2,
max.nc = 10, method = "kmeans", index ="all")
nClust<-length(unique(nb$Best.partition))
clustRange <- 1:nClust
kmeans.df <- data.frame(lat = coord$lat,
lon = coord$lon)
kmeans.df <- na.omit(kmeans.df)     #omiting terms with NA
#for(i in clustRange){
# fit <- kmeans(kmeans.df, centers = i, iter.max = 100)
#  }
#performing kmeans on location data frame
#with centers as nClust(number of clusters)
fit <- kmeans(kmeans.df, centers = nClust, nstart = 20)
kmeans.df$cluster = fit$cluster #adding cluster column to data frame
library(RColorBrewer)               # using RColorBrewer to assign  colours
cols <- brewer.pal(nClust, "Set3")  #to points with same cluster number
for(i in 1:nClust){
kmeans.df$color[kmeans.df$cluster == i] <- cols[i]
}
kmeans.df$Cluster <- as.factor(kmeans.df$cluster)
g <- ggplot() +                       #plotting the geopoints with clusters
geom_polygon(aes(long,lat, group=group), fill="grey85", data=map.dat) +
geom_jitter(aes(x = lon, y = lat, fill=Cluster,
colour=Cluster), alpha=1, size=0.8,  data = kmeans.df) +
guides(fill = guide_legend( override.aes = list(alpha = 1))) +
theme_minimal() +
theme(text = element_text(size=15),
legend.position="top")
g
library("MASS")
stat_density_2d <- function(mapping = NULL, data = NULL, geom = "density_2d",
position = "identity", contour = TRUE,
n = 100, h = NULL, na.rm = FALSE,bins=0,
show.legend = NA, inherit.aes = TRUE, ...) {
layer(
data = data,
mapping = mapping,
stat = StatDensity2d,
geom = geom,
position = position,
show.legend = show.legend,
inherit.aes = inherit.aes,
params = list(
na.rm = na.rm,
contour = contour,
n = n,
bins=bins,
...
)
)
}
stat_density2d <- stat_density_2d
StatDensity2d <-
ggproto("StatDensity2d", Stat,
default_aes = aes(colour = "#3366FF", size = 0.5),
required_aes = c("x", "y"),
compute_group = function(data, scales, na.rm = FALSE, h = NULL,
contour = TRUE, n = 100,bins=0) {
if (is.null(h)) {
h <- c(MASS::bandwidth.nrd(data$x), MASS::bandwidth.nrd(data$y))
}
dens <- MASS::kde2d(
data$x, data$y, h = h, n = n,
lims = c(scales$x$dimension(), scales$y$dimension())
)
df <- data.frame(expand.grid(x = dens$x, y = dens$y), z = as.vector(dens$z))
df$group <- data$group[1]
if (contour) {
if (bins>0){
StatContour$compute_panel(df, scales,bins)
} else {
StatContour$compute_panel(df, scales)
}
} else {
names(df) <- c("x", "y", "density", "group")
df$level <- 1
df$piece <- 1
df
}
}
)
g <- g +
stat_density2d(
aes(x = lon, y = lat,fill=as.factor(cluster), colour=as.factor(cluster)),
bins = 10, alpha=.2,
size=0, data = kmeans.df, geom = "polygon")
g
source('~/best1.R')
nClust<-length(unique(nb$Best.partition))
clustRange <- 1:nClust
kmeans.df <- data.frame(lat = coord$lat,
lon = coord$lon)
kmeans.df <- na.omit(kmeans.df)     #omiting terms with NA
#for(i in clustRange){
# fit <- kmeans(kmeans.df, centers = i, iter.max = 100)
#  }
#performing kmeans on location data frame
#with centers as nClust(number of clusters)
fit <- kmeans(kmeans.df, centers = nClust, nstart = 20)
kmeans.df$cluster = fit$cluster #adding cluster column to data frame
library(RColorBrewer)               # using RColorBrewer to assign  colours
cols <- brewer.pal(nClust, "Set3")  #to points with same cluster number
for(i in 1:nClust){
kmeans.df$color[kmeans.df$cluster == i] <- cols[i]
}
kmeans.df$Cluster <- as.factor(kmeans.df$cluster)
g <- ggplot() +                       #plotting the geopoints with clusters
geom_polygon(aes(long,lat, group=group), fill="grey85", data=map.dat) +
geom_jitter(aes(x = lon, y = lat, fill=Cluster,
colour=Cluster), alpha=1, size=0.8,  data = kmeans.df) +
guides(fill = guide_legend( override.aes = list(alpha = 1))) +
theme_minimal() +
theme(text = element_text(size=15),
legend.position="top")
g
library("MASS")
stat_density_2d <- function(mapping = NULL, data = NULL, geom = "density_2d",
position = "identity", contour = TRUE,
n = 100, h = NULL, na.rm = FALSE,bins=0,
show.legend = NA, inherit.aes = TRUE, ...) {
layer(
data = data,
mapping = mapping,
stat = StatDensity2d,
geom = geom,
position = position,
show.legend = show.legend,
inherit.aes = inherit.aes,
params = list(
na.rm = na.rm,
contour = contour,
n = n,
bins=bins,
...
)
)
}
stat_density2d <- stat_density_2d
StatDensity2d <-
ggproto("StatDensity2d", Stat,
default_aes = aes(colour = "#3366FF", size = 0.5),
required_aes = c("x", "y"),
compute_group = function(data, scales, na.rm = FALSE, h = NULL,
contour = TRUE, n = 100,bins=0) {
if (is.null(h)) {
h <- c(MASS::bandwidth.nrd(data$x), MASS::bandwidth.nrd(data$y))
}
dens <- MASS::kde2d(
data$x, data$y, h = h, n = n,
lims = c(scales$x$dimension(), scales$y$dimension())
)
df <- data.frame(expand.grid(x = dens$x, y = dens$y), z = as.vector(dens$z))
df$group <- data$group[1]
if (contour) {
if (bins>0){
StatContour$compute_panel(df, scales,bins)
} else {
StatContour$compute_panel(df, scales)
}
} else {
names(df) <- c("x", "y", "density", "group")
df$level <- 1
df$piece <- 1
df
}
}
)
g <- g +
stat_density2d(
aes(x = lon, y = lat,fill=as.factor(cluster), colour=as.factor(cluster)),
bins = 10, alpha=.2,
size=0, data = kmeans.df, geom = "polygon")
g
?DBSCAN
??DBSCAN
?dbscan
??dbscan
save.image("~/workspace.RData")
load("/home/aditya/workspace.RData")
fg<-g
fg +
stat_density2d(
aes(x = lon, y = lat, fill = ..level.., alpha = ..level..),
size = 2, bins = 4, data = kmeans.df,
geom = "polygon"
)
overlay <- stat_density2d(
aes(x = lon, y = lat, fill = ..level.., alpha = ..level..),
bins = 4, geom = "polygon",
data = kmeans.df
)
fg + overlay + inset(
grob = ggplotGrob(ggplot() + overlay + theme_inset()),
xmin = -150, xmax = 200, ymin = -90, ymax = 90
)
?stat_density2d
source('~/project.R')
warnings()
nClust<-length(unique(nb$Best.partition))
kmeans.df <- data.frame(lat = coord$lat,
lon = coord$lon)
kmeans.df <- na.omit(kmeans.df)     #omiting terms with NA
fit <- kmeans(kmeans.df, centers = nClust, nstart = 20)
kmeans.df$cluster = fit$cluster #adding cluster column to data frame
library(RColorBrewer)               # using RColorBrewer to assign  colours
cols <- brewer.pal(nClust, "Set3")  #to points with same cluster number
for(i in 1:nClust){
kmeans.df$color[kmeans.df$cluster == i] <- cols[i]
}
kmeans.df$Cluster <- as.factor(kmeans.df$cluster)
g <- ggplot() +                       #plotting the geopoints with clusters
geom_polygon(aes(long,lat, group=group), fill="grey85", data=map.dat) +
geom_jitter(aes(x = lon, y = lat, fill=Cluster,
colour=Cluster), alpha=1, size=0.8,  data = kmeans.df) +
guides(fill = guide_legend( override.aes = list(alpha = 1))) +
theme_minimal() +
theme(text = element_text(size=15),
legend.position="top")
g
library("MASS")
g <- g +
stat_density_2d(
aes(x = lon, y = lat,fill=as.factor(cluster), colour=as.factor(cluster)),
bins = 10, alpha=.2,
size=0, data = kmeans.df, geom = "polygon")
g
?twListToDF
length(followers)
length(loc)
length(followers)
View(followers)
write.ftable(coord, "coord.txt")
write.table(coord, "coord.txt")
shiny::runApp('Desktop/WIP')
runApp('Desktop/WIP')
install.packages("devtools")
runApp('Desktop/WIP')
runApp('Desktop/WIP')
runApp('Desktop/WIP')
runApp('Desktop/WIP')
runApp('Desktop/WIP')
runApp('Desktop/WIP')
runApp('Desktop/WIP')
runApp('Desktop/WIP')
shiny::runApp('Desktop/WIP')
shiny::runApp('Desktop/WIP')
runApp('Desktop/WIP')
